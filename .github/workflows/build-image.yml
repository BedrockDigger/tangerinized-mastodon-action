name: Build Mastodon Docker Images

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *"

jobs:
  check-for-release:
    runs-on: ubuntu-latest
    outputs:
      found_new_release: ${{ steps.check-for-release.outputs.found_new_release }}
      tag: ${{ steps.check-for-release.outputs.tag }}
    steps:
      - name: Check for new Mastodon release
        id: check-for-release
        run: |
          GITHUB_TAG=$(curl -s https://api.github.com/repos/mastodon/mastodon/releases/latest | jq -r '.tag_name')
          echo "The latest release is $GITHUB_TAG"
          echo "tag=$GITHUB_TAG" >> $GITHUB_OUTPUT

          DOCKERHUB_ACCESS_TOKEN=$(curl -s --location 'https://hub.docker.com/v2/auth/token' --header 'Content-Type: application/json' --data '{"identifier":"${{ secrets.DOCKERHUB_USERNAME }}","secret":"${{ secrets.DOCKERHUB_TOKEN }}"}' | jq '.access_token')
          DOCKERHUB_TAG=$(curl -s --location 'https://hub.docker.com/v2/namespaces/${{ secrets.DOCKERHUB_NAMESPACE }}/repositories/${{ secrets.DOCKERHUB_REPOSITORY}}/tags' --header 'Authorization: $DOCKERHUB_ACCESS_TOKEN' | jq '.results[1].name')
          echo "The latest Docker Hub tag is $DOCKERHUB_TAG"

          if [ "$GITHUB_TAG" != "$DOCKERHUB_TAG" ]; then
            echo "found_new_release=true" >> $GITHUB_OUTPUT
          else
            echo "found_new_release=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: check-for-release
    if: ${{ needs.check-for-release.outputs.found_new_release == 'true' || github.event_name == 'workflow_dispatch' }}
    runs-on: ${{ startsWith(matrix.platform, 'linux/arm') && 'ubuntu-24.04-arm' || 'ubuntu-24.04' }}
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - uses: actions/checkout@v4
        with:
          repository: mastodon/mastodon
          ref: ${{ needs.check-for-release.outputs.tag }}
          path: mastodon

      - uses: actions/checkout@v4
        with:
          repository: nileane/TangerineUI-for-Mastodon
          ref: main
          path: tgui

      - name: Copy Tangerine UI files to mastodon folder and configure themes.yml
        run: |
          cp -r ./tgui/mastodon/app/javascript/styles/* ./mastodon/app/javascript/styles
          echo -e "tangerineui: styles/tangerineui.scss\ntangerineui-purple: styles/tangerineui-purple.scss\ntangerineui-cherry: styles/tangerineui-cherry.scss\ntangerineui-lagoon: styles/tangerineui-lagoon.scss" >> ./mastodon/config/themes.yml

      - name: Build and push Docker image for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          context: mastodon
          file: mastodon/Dockerfile
          platforms: ${{ matrix.platform }}
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_NAMESPACE }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
            ${{ secrets.DOCKERHUB_NAMESPACE }}/${{ secrets.DOCKERHUB_REPOSITORY }}:${{ needs.check-for-release.outputs.tag }}
          outputs: type=image,"name=${{ secrets.DOCKERHUB_NAMESPACE }}/${{ secrets.DOCKERHUB_REPOSITORY }}",push-by-digest=true,name-canonical=true,push=true
